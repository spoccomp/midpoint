 <%= render 'shared/nav' %>


<%# <div class="container">

  <form>
    <div class="form-group">
      <input type="text" class="form-control" id="exampleInputEmail1"  placeholder="Location 1">
    </div>
    <div class="form-group">
      <input type="text" class="form-control" id="exampleInputPassword1" placeholder="Location 2">
    </div>
    <div class="form-group form-check">
      <div class="row">
        <div class="col-md-2 col-sm-4">
          <label class="form-check-label" for="exampleCheck1">1/4 mile
          </label><br>
          &emsp;&ensp;<input type="checkbox" class="form-check-input" id="exampleCheck1">
        </div>
        <div class="col-md-2 col-sm-4">
          <label class="form-check-label" for="exampleCheck2">1/2 mile
          </label><br>
          &emsp;&ensp;<input type="checkbox" class="form-check-input" id="exampleCheck2">
        </div>
        <div class="col-md-2 col-sm-4">
          <label class="form-check-label" for="exampleCheck3">1 mile
          </label><br>
          &emsp;&ensp;<input type="checkbox" class="form-check-input" id="exampleCheck3">
        </div>
      </div>
    </div>

    <div class="container row">
      <div class="row top">
        <div class="col">
          <button type="button" class="btn btns">Dining
          </button>
        </div>
        <div class="col">
          <button type="button" class="btn btns">Stores
          </button>
        </div>
        <div class="col">
          <button type="button" class="btn btns">Attraction
          </button>
        </div> 
        <div class="col"> 
          <button type="button" class="btn btns">All
          </button>
        </div>
        <div class="col">
          <div class= "smallerbutton">
            <button type="button" class="btn btns-cancel">Cancel
            </button>
          </div>
        </div>
      </div>
    
      <div class="row top">
        <div class="col">
          <div class= "smallerbutton">
            <button type="button" class="btn btns"><strong><%= link_to 'Go', route_maps_path, class: "btns" %></strong>
            <%# </button> %>
          <%# </div> %>
        <%# </div> %>
      <%# </div> %>
    <%# </div> %>
  <%# </form> %>
<%# </div> %> 



  <input id="origin-input" class="controls" type="text" placeholder="Enter an origin location">

    <input id="destination-input" class="controls" type="text" placeholder="Enter a destination location">

    <div id="mode-selector" class="controls">

        <input type="radio" name="type" id="changemode-walking" checked="checked">

        <label for="changemode-walking">Walking</label>

        <input type="radio" name="type" id="changemode-transit">

        <label for="changemode-transit">Transit</label>

        <input type="radio" name="type" id="changemode-driving">

        <label for="changemode-driving">Driving</label>

    </div>

    <div id="map"></div>

    <div id="infowindow-content">
        <img id="place-icon" src="" height="16" width="16">
        <span id="place-name"  class="title"></span><br>
        Place ID <span id="place-id"></span><br>
        <span id="place-address"></span>
    </div>

<%# save to favorite %>
  <%= form_with model: @favorite do |f| %>
    <% f.hidden_field :place_id, :value => "fu"%>
    <%= f.hidden_field :name  %> 
    <%= f.hidden_field :phone %>
    <%= f.hidden_field :address %>
    <%= f.hidden_field :lat %>
    <%= f.hidden_field :long %>
    <%= f.submit "Save Favorite" %>
  <% end %>
  
<%# email party link %>
    <%# <%= link_to "Party", email_models_path %> 
    <div class="modal fade" id="modalLoginForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h4 id ="mail" class="modal-title w-100 font-weight-bold">Send Mail</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body mx-3">
                <div class="md-form mb-5">
                    <i class="fa fa-envelope prefix grey-text"></i>
                    <input type="email" id="defaultForm-email" class="form-control validate">
                    <label data-error="wrong" data-success="right" for="defaultForm-email">Your email</label>
                </div>

                <div class="md-form mb-4">
                    <i class="fa fa-lock prefix grey-text"></i>
                    <input type="email" id="defaultForm-email" class="form-control validate">
                    <label data-error="wrong" data-success="right" for="defaultForm-pass">Recipient Email</label>
                </div>

            </div>
            <div class="modal-footer d-flex justify-content-center">
                <button id ="myBtn" class="btn btn-default">Mail</button>
            </div>
        </div>
    </div>
</div>

<div class="text-center">
    <a href="" class="btn btn-default btn-rounded mb-4" data-toggle="modal" data-target="#modalLoginForm">Ready to Email</a>
</div>
<script>
document.getElementById("myBtn").addEventListener("click", function(){
    document.getElementById("mail").innerHTML = "SUCCESS";
    // document.getElementById("modalLoginForm").style.display = "none";
});
</script>


<script>
  

    
        // This example requires the Places library. Include the libraries=places

        // parameter when you first load the API. For example:

        // <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDsqdXJStvxLRM2SytREL8eNw2xC3j6LE8&libraries=places">
        let map;
        let clickHandler;
        function initMap() {
            
            
            map = new google.maps.Map(document.getElementById('map'), {

                mapTypeControl: true,

                //   New York City

                center: { lat: 40.730610, lng: -73.935242 },

                zoom: 13

                

            });
            
            new AutocompleteDirectionsHandler(map);
            clickHandler = new ClickEventHandler(map, origin);

        }

        /**
 
         * @constructor
 
        */
        let POI;
        let fPlaceFid;
        let nameF;
        let phoneF;
        let addressF;
        let latF;
        let lngF;
        let ClickEventHandler = function(map, origin) {
        this.origin = origin;
        this.map = map;
        this.directionsService = new google.maps.DirectionsService;
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);
        this.placesService = new google.maps.places.PlacesService(map);
        this.infowindow = new google.maps.InfoWindow;
        this.infowindowContent = document.getElementById('infowindow-content');
        this.infowindow.setContent(this.infowindowContent);

        // Listen for clicks on the map.
        this.map.addListener('click', this.handleClick.bind(this));
      };

      ClickEventHandler.prototype.handleClick = function(event) {
         POI = event.latLng
        latF = POI.lat();
        lngF = POI.lng();
         console.log(POI.lat(), POI.lng());
        //console.log(`${event.latlng}`);
        fPlaceFid = event.placeId;
        console.log( 'You clicked on: ' + fPlaceFid);
        //console.log('You clicked on: ' + event.latLng);
        // If the event has a placeId, use it.
        if (event.placeId) {
         // console.log('You clicked on place:' + event.placeId);
          //favoriteResponse = `https://maps.googleapis.com/maps/api/place/details/json?placeid=${fPlaceFid}&fields=name,rating,formatted_address,formatted_phone_number&key=AIzaSyDsqdXJStvxLRM2SytREL8eNw2xC3j6LE8`
          
          // Calling e.stop() on the event prevents the default info window from
          // showing.
          // If you call stop here when there is no placeId you will prevent some
          // other map click event handlers from receiving the event.
          event.stop();
          this.calculateAndDisplayRoute(event.placeId);
          this.getPlaceInformation(event.placeId);
        }
      };

      ClickEventHandler.prototype.calculateAndDisplayRoute = function(placeId) {
        let me = this;
        this.directionsService.route({
          origin: this.origin,
          destination: {placeId: placeId},
          travelMode: 'WALKING'
        }, function(response, status) {
          if (status === 'OK') {
            me.directionsDisplay.setDirections(response);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      };

      
      
      
      
      ClickEventHandler.prototype.getPlaceInformation = function(placeId) {
        let me = this;
        
        
        this.placesService.getDetails({placeId: placeId}, function(place, status) {
          if (status === 'OK') {
            me.infowindow.close();
            me.infowindow.setPosition(place.geometry.location);
            me.infowindowContent.children['place-icon'].src = place.icon;
            me.infowindowContent.children['place-name'].textContent = place.name;
         
            me.infowindowContent.children['place-id'].textContent = place.place_id;
            
            me.infowindowContent.children['place-address'].textContent =
                place.formatted_address;          
            me.infowindow.open(me.map);


            nameF = place.name;
            addressF = place.formatted_address;
            phoneF = place.formatted_phone_number;

            //Pass JS to Ruby
            // document.getElementById("favorite_place_id").value = fPlaceFid;
            document.getElementById("favorite_name").value = nameF;
            document.getElementById("favorite_address").value = addressF;
            document.getElementById("favorite_phone").value = phoneF;
            document.getElementById("favorite_lat").value = latF;
            document.getElementById("favorite_long").value = lngF;

            
            console.log(`${nameF} ${addressF} ${phoneF}`);
          }
        });
      };
      
      // Midpoint code -----------------------------------------------------------------

        function AutocompleteDirectionsHandler(map) {

            this.map = map;

            this.originPlaceId = null;

            this.destinationPlaceId = null;

            this.travelMode = 'WALKING';

            let originInput = document.getElementById('origin-input');

            let destinationInput = document.getElementById('destination-input');

            let modeSelector = document.getElementById('mode-selector');

            this.directionsService = new google.maps.DirectionsService;

            this.directionsDisplay = new google.maps.DirectionsRenderer;

            this.directionsDisplay.setMap(map);

            let originAutocomplete = new google.maps.places.Autocomplete(

                originInput, { placeIdOnly: false });

            let destinationAutocomplete = new google.maps.places.Autocomplete(

                destinationInput, { placeIdOnly: false });

            this.setupClickListener('changemode-walking', 'WALKING');

            this.setupClickListener('changemode-transit', 'TRANSIT');

            this.setupClickListener('changemode-driving', 'DRIVING');

            this.setupPlaceChangedListener(originAutocomplete, 'ORIG');

            this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);

            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);

            this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);

        }

        // Sets a listener on a radio button to change the filter type on Places

        // Autocomplete.

        AutocompleteDirectionsHandler.prototype.setupClickListener = function (id, mode) {

            let radioButton = document.getElementById(id);

            let me = this;

            radioButton.addEventListener('click', function () {

                me.travelMode = mode;

                me.route();

            });

        };

        AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {

            let me = this;

            autocomplete.bindTo('bounds', this.map);

            autocomplete.addListener('place_changed', function () {

                let place = autocomplete.getPlace();

                if (!place.place_id) {

                    window.alert("Please select an option from the dropdown list.");

                    return;

                }

                if (mode === 'ORIG') {

                    me.originPlaceId = place.place_id;
                    
                } else {

                    me.destinationPlaceId = place.place_id;

                }

                me.route();

            });

        };

        AutocompleteDirectionsHandler.prototype.route = function  () {

            if (!this.originPlaceId || !this.destinationPlaceId) {

                return;

            }

            let me = this;

            let routeresponse = this.directionsService.route({

                origin: { 'placeId': this.originPlaceId },

                destination: { 'placeId': this.destinationPlaceId },

                travelMode: this.travelMode

            }, function (response, status) {

                if (status === 'OK') {
                    let halfwaydistance;
                    halfwaydistance = (response.routes[0].legs[0].distance.value) / 2;
                    //converting to metres
                    halfwaydistance = halfwaydistance;
                    // let overview = response.routes[0].overview_polyline.GetPointAtDistance(halfwaydistance);

                    let polyline = new google.maps.Polyline({
                        path: [],
                        strokeColor: '#FF0000',
                        strokeWeight: 3
                    });

                    let bounds = new google.maps.LatLngBounds();

                    let legs = response.routes[0].legs;
                    for (i = 0; i < legs.length; i++) {
                        let steps = legs[i].steps;
                        for (j = 0; j < steps.length; j++) {
                            let nextSegment = steps[j].path;
                            for (k = 0; k < nextSegment.length; k++) {
                                polyline.getPath().push(nextSegment[k]);
                                bounds.extend(nextSegment[k]);
                            }
                        }
                    }
                    let start = 0;
                    let start_postion = polyline.GetPointAtDistance(start)
                    // origin = {lat: startposition.lat, lng: startposition.lng}
                    // var marker = new google.maps.Marker({ position: polyline.GetPointAtDistance(halfwaydistance), map: map }).setMap(map);
                    coordinates = polyline.GetPointAtDistance(halfwaydistance);
                    me.directionsDisplay.setDirections(response);
                    // origin = { lat: 40.730610, lng: -73.935242 };
                    
                    clickHandler.origin = {lat: start_postion.lat(),lng: start_postion.lng()};
                    
                
                    // var amap = document.getElementById("map");
                    let marker = new google.maps.Marker({
                        position: coordinates,
                        title: "Mid Point"
                    });
                    marker.setMap(map);





                } else {

                    window.alert('Directions request failed due to ' + status);

                }

            });


        };
        </script>

 

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDsqdXJStvxLRM2SytREL8eNw2xC3j6LE8&libraries=places&callback=initMap"
        ></script>



<script>
/* epolys.js                                          by Mike Williams
* updated to API v3                                  by Larry Ross
* A Google Maps API Extension
* Adds various Methods to google.maps.Polygon and google.maps.Polyline
* .Distance()       returns the length of the poly path
* .GetPointAtDistance() returns a GLatLng at the specified distance
*                   along the path.
*                   The distance is specified in metres
*                   Reurns null if the path is shorter than that
*   This Javascript is provided by Mike Williams
*   Blackpool Community Church Javascript Team
*   http://www.blackpoolchurch.org/
*   http://econym.org.uk/gmap/
*   This work is licenced under a Creative Commons Licence
*   http://creativecommons.org/licenses/by/2.0/uk/
* Version 1.1       6-Jun-2007
* Version 1.2       1-Jul-2007 - fix: Bounds was omitting vertex zero
*                                add: Bearing
* Version 1.3       28-Nov-2008  add: GetPointsAtDistance()
* Version 1.4       12-Jan-2009  fix: GetPointsAtDistance()
* Version 3.0       11-Aug-2010  update to v3
*/

google.maps.LatLng.prototype.distanceFrom = function (newLatLng) {
    var EarthRadiusMeters = 6378137.0; // meters
    var lat1 = this.lat();
    var lon1 = this.lng();
    var lat2 = newLatLng.lat();
    var lon2 = newLatLng.lng();
    var dLat = (lat2 - lat1) * Math.PI / 180;
    var dLon = (lon2 - lon1) * Math.PI / 180;
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = EarthRadiusMeters * c;
    return d;
  }
  
  // === A method which returns the length of a path in metres
  google.maps.Polygon.prototype.Distance = function () {
    var dist = 0;
    for (var i = 1; i < this.getPath().getLength(); i++) {
      dist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i - 1));
    }
    return dist;
  }
  
  // === A method which returns a GLatLng of a point a given distance along the path
  // === Returns null if the path is shorter than the specified distance
  google.maps.Polygon.prototype.GetPointAtDistance = function (metres) {
    // some awkward special cases
    if (metres == 0) return this.getPath().getAt(0);
    if (metres < 0) return null;
    if (this.getPath().getLength() < 2) return null;
    var dist = 0;
    var olddist = 0;
    for (var i = 1; (i < this.getPath().getLength() && dist < metres); i++) {
      olddist = dist;
      dist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i - 1));
    }
    if (dist < metres) {
      return null;
    }
    var p1 = this.getPath().getAt(i - 2);
    var p2 = this.getPath().getAt(i - 1);
    var m = (metres - olddist) / (dist - olddist);
    return new google.maps.LatLng(p1.lat() + (p2.lat() - p1.lat()) * m, p1.lng() + (p2.lng() - p1.lng()) * m);
  }
  
  
  google.maps.Polyline.prototype.Distance = google.maps.Polygon.prototype.Distance;
  google.maps.Polyline.prototype.GetPointAtDistance = google.maps.Polygon.prototype.GetPointAtDistance;
  

    </script>

    <!-- <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDsqdXJStvxLRM2SytREL8eNw2xC3j6LE8&libraries=places&callback=initMap"
        defer></script> -->
<!-- 
    <script src="main.js" type="text/javascript" defer> </script> -->

</body>

</html>
